name: Create release

on:
  workflow_dispatch:
    inputs:
      appVersion:
        description: App version to promote to release (default is latest)
        required: false
        default: 'latest'
      name:
        description: Name of this release
        required: true
        default: ''
      tag:
        description: Tag of this release
        required: true
        default: ''
      draft:
        description: Draft (Y/N)
        required: false
        default: 'N'
      prerelease:
        description: Prerelease (Y/N)
        required: false
        default: 'N'

concurrency: release

defaults:
  run:
    shell: PowerShell

jobs:
  Release:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Read settings
        uses: freddydk/AL-Go-Actions/ReadSettings@main
        with:
          get: TemplateUrl,TemplateBranch

      - name: Check for updates to AL-Go system files
        uses: freddydk/AL-Go-Actions/CheckForUpdates@main
        with:
          templateUrl: ${{ env.TemplateUrl }}
          templateBranch: ${{ env.TemplateBranch }}

      - name: Download Artifacts
        id: downloadartifacts
        run: |
          $appVersion = '${{github.event.inputs.appVersion}}'
          $ALGoHelperPath = "$([System.IO.Path]::GetTempFileName()).ps1"
          $webClient = New-Object System.Net.WebClient
          $webClient.CachePolicy = New-Object System.Net.Cache.RequestCachePolicy -argumentList ([System.Net.Cache.RequestCacheLevel]::NoCacheNoStore)
          $webClient.Encoding = [System.Text.Encoding]::UTF8
          $webClient.DownloadFile('https://raw.githubusercontent.com/freddydk/AL-Go-Actions/main/AL-Go-Helper.ps1', $ALGoHelperPath)
          . $ALGoHelperPath -local
          $baseFolder = Join-Path $ENV:GITHUB_WORKSPACE "artifacts"
          New-Item $baseFolder -ItemType Directory | Out-Null
          $allArtifacts = GetArtifacts -token '${{github.token}}' -api_url $ENV:GITHUB_API_URL -repository $ENV:GITHUB_REPOSITORY
          $artifactsVersion = $appVersion
          if ($appVersion -eq "latest") {
            $artifact = $allArtifacts | Where-Object { $_.name -like "*-Apps-*" } | Select-Object -First 1
            $artifactsVersion = $artifact.name.SubString($artifact.name.IndexOf('-Apps-')+6)
          }
          $allArtifacts | Where-Object { $_.name -like "*-Apps-$artifactsVersion" } | ForEach-Object {
            DownloadArtifact -token '${{github.token}}' -artifact $_ -path $baseFolder
          }
          $apps = @((Get-ChildItem -Path $baseFolder) | ForEach-Object { $_.FullName })
          $apps | out-host
          $zipFilename = "$($ENV:GITHUB_REPOSITORY.Replace('/','-'))-${{github.event.inputs.name}}.zip".split([System.IO.Path]::GetInvalidFileNameChars()) -join ''
          Write-Host "::set-output name=zipfilename::$zipFilename"
          Compress-Archive -Path (Join-Path $baseFolder '*') -destinationPath (Join-Path $ENV:GITHUB_WORKSPACE $zipFilename)

      - name: Create release
        uses: actions/create-release@v1
        id: createrelease
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          draft: ${{github.event.inputs.draft=='Y'}}
          prerelease: ${{github.event.inputs.prerelease=='Y'}}
          release_name: '${{github.event.inputs.name}}'
          tag_name: '${{github.event.inputs.tag}}'
          body_path: README.md

      - name: Upload release artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{steps.createrelease.outputs.upload_url}}
          asset_path: ${{steps.downloadartifacts.outputs.zipfilename}}
          asset_name: ${{steps.downloadartifacts.outputs.zipfilename}}
          asset_content_type: application/zip
