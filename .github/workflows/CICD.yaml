name: CI/CD

on:
  push:
    paths-ignore:
      - 'README.md'
      - '.github/**'
    branches: [ main ]
  pull_request:
    paths-ignore:
      - 'README.md'
      - '.github/**'
    branches: [ main ]
  workflow_dispatch:

defaults:
  run:
    shell: PowerShell

jobs:
  CheckForUpdates:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Read settings
        uses: freddydk/AL-Go-Actions/ReadSettings@main
        with:
          get: TemplateUrl,TemplateBranch

      - name: Check for updates to AL-Go system files
        uses: freddydk/AL-Go-Actions/CheckForUpdates@main
        with:
          templateUrl: ${{ env.TemplateUrl }}
          templateBranch: ${{ env.TemplateBranch }}
  Projects:
    runs-on: windows-latest
    outputs:
      projects: ${{steps.Projects.outputs.projects}}
      projectCount: ${{steps.Projects.outputs.projectCount}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Projects
        id: Projects
        run: |
          if (Test-Path ".AL-Go" -PathType Container) {
            $projects = @(".")
          }
          else {
            $projects = @(Get-ChildItem -Path $ENV:GITHUB_WORKSPACE -Directory | Where-Object { Test-Path (Join-Path $_.FullName ".AL-Go") -PathType Container } | ForEach-Object { $_.Name })
          }
          if ($projects.Count -eq 1) {
            $projectsJSon = "[$($projects | ConvertTo-Json -compress)]"
          }
          else {
            $projectsJSon = $projects | ConvertTo-Json -compress
          }
          Write-Host "::set-output name=projects::$projectsJson"
          Write-Host "::set-output name=projectCount::$($projects.Count)"
          Write-Host "set-output name=projects::$projectsJson"
          Write-Host "set-output name=projectCount::$($projects.Count)"
  Environments:
    runs-on: windows-latest
    outputs:
      environments: ${{steps.Environments.outputs.environments}}
      environmentCount: ${{steps.Environments.outputs.environmentCount}}
    steps:
      - name: Environments
        id: Environments
        run: |
          $headers = @{ 
            "Authorization" = "token ${{github.token}}"
            "Accept"        = "application/vnd.github.v3+json"
          }
          $url = "$($ENV:GITHUB_API_URL)/repos/$($ENV:GITHUB_REPOSITORY)/environments"
          $environments = @((Invoke-WebRequest -UseBasicParsing -Headers $headers -Uri $url | ConvertFrom-Json).environments | ForEach-Object { $_.Name })
          if ($environments.Count -eq 1) {
            $environmentsJSon = "[$($environments | ConvertTo-Json -compress)]"
          }
          else {
            $environmentsJSon = $environments | ConvertTo-Json -compress
          }
          Write-Host "::set-output name=environments::$environmentsJson"
          Write-Host "::set-output name=environmentCount::$($environments.Count)"
          Write-Host "set-output name=environments::$environmentsJson"
          Write-Host "set-output name=environmentCount::$($environments.Count)"
  Build:
    runs-on: windows-latest
    needs: [ Projects ]
    strategy:
      matrix:
        project: ${{fromJson(needs.Projects.outputs.projects)}}
      fail-fast: false
    name: Build ${{matrix.project}}
    outputs:
      AppsArtifactsName: ${{steps.calculateArtifactNames.outputs.AppsArtifactsName}}
      TestAppsArtifactsName: ${{steps.calculateArtifactNames.outputs.TestAppsArtifactsName}}
      TestResultsArtifactsName: ${{steps.calculateArtifactNames.outputs.TestResultsArtifactsName}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Read settings
        uses: freddydk/AL-Go-Actions/ReadSettings@main
        id: readsettings
        with:
          project: ${{matrix.project}}

      - name: Read secrets
        uses: freddydk/AL-Go-Actions/ReadSecrets@main
        env:
          secrets: ${{toJson(secrets)}}
        with:
          settingsJson: ${{steps.readsettings.outputs.SettingsJson}}
          secrets: 'licenseFileUrl,insiderSasToken,CodeSignCertificateUrl,CodeSignCertificatePassword,KeyVaultCertificateUrl,KeyVaultCertificatePassword,KeyVaultClientId'

      - name: Run pipeline
        uses: freddydk/AL-Go-Actions/RunPipeline@main
        with:
          Project: ${{matrix.project}}
          SettingsJson: ${{ steps.readsettings.outputs.SettingsJson }}
          SecretsJson: ${{ env.RepoSecrets }}

      - name: Publish test results
        if: success() || failure()
        uses: mikepenz/action-junit-report@v1
        with:
          check_name: 'Test Report ${{matrix.project}}'
          report_paths: '${{matrix.project}}/TestResults*.xml'
          github_token: ${{ github.token }}

      - name: Calculate Artifact names
        id: calculateArtifactNames
        run: |
          $settings = '${{steps.readsettings.outputs.SettingsJson}}' | ConvertFrom-Json
          $project = '${{matrix.project}}'
          if ($project -eq ".") { $project = $settings.RepoName }
          $AppsArtifactsName = "$project-Apps-$($settings.repoVersion).$($settings.appBuild).$($settings.appRevision)"
          $TestAppsArtifactsName = "$project-TestApps-$($settings.repoVersion).$($settings.appBuild).$($settings.appRevision)"
          $TestResultsArtifactsName = "$project-TestResults"
          'AppsArtifactsName','TestAppsArtifactsName','TestResultsArtifactsName' | ForEach-Object {
            $value = (Get-Variable -Name $_).Value
            Write-Host "::set-output name=$_::$value"
            Add-Content -Path $env:GITHUB_ENV -Value "$_=$value"
          }

      - name: Publish artifacts - apps
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.appsArtifactsName}}
          path: '${{matrix.project}}/output/Apps/'
          if-no-files-found: ignore

      - name: Publish artifacts - test apps
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.testAppsArtifactsName}}
          path: '${{matrix.project}}/output/TestApps/'
          if-no-files-found: ignore

      - name: Publish artifacts - test results
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: ${{env.testResultsArtifactsName}}
          path: '${{matrix.project}}/TestResults.xml'
          if-no-files-found: ignore

      - name: Cleanup
        if: always()
        uses: freddydk/AL-Go-Actions/PipelineCleanup@main
  Deploy:
    runs-on: windows-latest
    needs: [ Build, Environments, Projects ]
    if: ${{needs.Environments.outputs.environmentCount > 0}}
    strategy:
      matrix:
        environment: ${{fromJson(needs.Environments.outputs.environments)}}
      fail-fast: false
    name: Deploy to ${{matrix.environment}}
    environment:
      name: ${{matrix.environment}}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: '${{ github.workspace}}\artifacts'

      - name: Deploy
        uses: freddydk/AL-Go-Actions/Deploy@main
        env:
          authContext: '${{secrets.AuthContext}}'
        with:
          type: 'CD'
          projects: '${{secrets.Projects}}'
          environmentName: ${{matrix.environment}}
          artifacts: '${{ github.workspace}}\artifacts'
